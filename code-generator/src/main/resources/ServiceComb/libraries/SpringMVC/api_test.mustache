package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import java.util.*;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.Assert.assertEquals;

public class {{classname}}ContractTest {
    @Autowired
    private {{classname}} api;

    private static final String NAME_LARRY_JSON = "{\"name\": \"larry\"}";

    @Rule
    public TestFailureProviderRule mockTestProvider = new TestFailureProviderRule("{{#camelcase}}{{classname}}{{/camelcase}}Provider", this);

    @Pact(provider="{{#camelcase}}{{classname}}{{/camelcase}}Provider", consumer="{{#camelcase}}{{classname}}{{/camelcase}}Consumer")
    public RequestResponsePact createFragment(PactDslWithProvider builder) {

{{#operations}}
    {{#operation}}
        {{#hasHeaderParams}}
                Map<String, String> {{operationId}}RequestHeaders = new HashMap<String, String>();
        {{/hasHeaderParams}}
    {{/operation}}
{{/operations}}
{{#operations}}
    {{#operation}}
        {{#responseHeaders}}
                Map<String, String> {{operationId}}ResponseHeaders = new HashMap<String, String>();
        {{/responseHeaders}}
    {{/operation}}
{{/operations}}

        return builder
{{#operations}}
    {{#operation}}
            .uponReceiving("{{summary}}")
                .path("{{path}}")
                .method("{{httpMethod}}")
                {{#hasHeaderParams}}
                .headers({{operationId}}RequestHeaders)
                {{/hasHeaderParams}}
            .willRespondWith()
                .status(200)
                {{#responseHeaders}}
                .headers({{operationId}}ResponseHeaders)
                {{/responseHeaders}}
                .body("{\"responsetest\": true, \"name\": \"harry\"}")
    {{/operation}}
{{/operations}}
            .toPact();
    }


    @Test
    @PactVerification({"{{#camelcase}}{{classname}}{{/camelcase}}Provider"})
    public void allPass() throws IOException {
      mockTestProvider.validateResultWith((result, t) -> {
        assertThat(t, is(nullValue()));
        assertThat(result, is(PactVerificationResult.Ok.INSTANCE));
      });
      doTest("/", NAME_LARRY_JSON);
    }

    private void doTest(String path, String json) throws IOException {
      Consumer consumer = new Consumer(mockTestProvider.getUrl());
      consumer.options("/second");
      try {
        consumer.getAsMap(path, "");
      } catch (IOException e) {
      }
      try {
        new Consumer(mockTestProvider2.getUrl()).putAsMap("/", json);
      } catch (IOException e) {
      }
    }

/*
        @Test
        public void {{operationId}}Test() throws Exception {
        {{#allParams}}
        {{^isFile}}
            {{{dataType}}} {{paramName}} = {{{example}}};
        {{/isFile}}
        {{#isFile}}
            org.springframework.web.multipart.MultipartFile {{paramName}} = null;
        {{/isFile}}
        {{/allParams}}
            ResponseEntity<{{>returnTypes}}> responseEntity = api.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
            assertEquals(HttpStatus.NOT_IMPLEMENTED, responseEntity.getStatusCode());
        }
*/
}